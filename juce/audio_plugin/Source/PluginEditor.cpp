/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
HeavyPluginAudioProcessorEditor::HeavyPluginAudioProcessorEditor (HeavyPluginAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p)
{
    pitchLabel = new Label("PitchLabel");
    pitchLabel->setText("Pitch", dontSendNotification);
    pitchLabel->setEditable(false);
    addAndMakeVisible(pitchLabel);
  
    pitchSlider = new Slider(Slider::LinearHorizontal, Slider::NoTextBox);
    pitchSlider->setRange(0.0, 1.0);
    pitchSlider->addListener(this);
    addAndMakeVisible(pitchSlider);

    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (400, 300);
}

HeavyPluginAudioProcessorEditor::~HeavyPluginAudioProcessorEditor()
{
}

//==============================================================================
void HeavyPluginAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::white);
}

void HeavyPluginAudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
  
    int margin = 10;
  
    pitchLabel->setBounds(margin, margin, 50, 20);
  
    int x = pitchLabel->getRight()+margin;
    int w = getWidth() - x - margin;
    pitchSlider->setBounds(x, margin, w, 20);
}

void HeavyPluginAudioProcessorEditor::sliderValueChanged (Slider* slider)
{
  if (slider == pitchSlider)
  {
    processor.setParameterNotifyingHost(HV_PARAM_PITCH, (float) slider->getValue());
  }
}
