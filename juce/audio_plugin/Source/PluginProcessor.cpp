/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

//==============================================================================
HeavyPluginAudioProcessor::HeavyPluginAudioProcessor()
{
    hvContext = hv_juce_new(44100.0);
    
    for (int i = 0; i < HV_NUM_PARAMS; ++i)
    {
        params.add(0.5f);
    }
}

HeavyPluginAudioProcessor::~HeavyPluginAudioProcessor()
{
  hv_juce_free(hvContext);
}

//==============================================================================
const String HeavyPluginAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int HeavyPluginAudioProcessor::getNumParameters()
{
    return HV_NUM_PARAMS;
}

float HeavyPluginAudioProcessor::getParameter (int index)
{
  return params.getReference(index);
}

void HeavyPluginAudioProcessor::setParameter (int index, float newValue)
{
  const char *receiverName = "";
  switch (index)
  {
    case HV_PARAM_PITCH: receiverName = "pitch"; break;
    default: return;
  }
  params.set(index, newValue);
  hv_vscheduleMessageForReceiver(hvContext, receiverName, 0.0, "f", newValue);
}

const String HeavyPluginAudioProcessor::getParameterName (int index)
{
  switch (index)
  {
    case HV_PARAM_PITCH: return "Pitch";
    default: return String();
  }
}

const String HeavyPluginAudioProcessor::getParameterText (int index)
{
    return String();
}

const String HeavyPluginAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String HeavyPluginAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool HeavyPluginAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool HeavyPluginAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool HeavyPluginAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool HeavyPluginAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool HeavyPluginAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double HeavyPluginAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int HeavyPluginAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int HeavyPluginAudioProcessor::getCurrentProgram()
{
    return 0;
}

void HeavyPluginAudioProcessor::setCurrentProgram (int index)
{
}

const String HeavyPluginAudioProcessor::getProgramName (int index)
{
    return String();
}

void HeavyPluginAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void HeavyPluginAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
  if (hv_getSampleRate(hvContext) != sampleRate)
  {
    if (hvContext != nullptr) hv_juce_free(hvContext);
    
    hvContext = hv_juce_new(sampleRate);
  }
}

void HeavyPluginAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void HeavyPluginAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    // the samplerate somehow changed without updating the heavy context!
    jassert(hv_getSampleRate(hvContext) == getSampleRate());
  
    float **outBuffers = buffer.getArrayOfWritePointers();
  
    hv_juce_process(hvContext, nullptr, outBuffers, buffer.getNumSamples());
}

//==============================================================================
bool HeavyPluginAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* HeavyPluginAudioProcessor::createEditor()
{
    return new HeavyPluginAudioProcessorEditor (*this);
}

//==============================================================================
void HeavyPluginAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void HeavyPluginAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new HeavyPluginAudioProcessor();
}
